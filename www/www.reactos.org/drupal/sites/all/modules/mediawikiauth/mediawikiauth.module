<?php
// Written by Mitch Schwenk <tazzytazzy at yahoo (.) com
// Updates by Maarten van Dantzich mediawiki.org User:Thinkling
//
//  v 0.7 - 2010-03 adopted Drupal side module renaming to match version 
//    on drupal.org maintained by anarcat.
//  v 0.6 - 2008-06
//    removed hook_perms as it wasn't relevant
//    replaced mcrypt with less secure but more portable approach to 
//      communicating & verifying the username
//  v 0.5 - 2007-09
//    no updates to this file
//  v 0.4 - 2007-0729
//     Maarten-added support for multiple wikis by putting settings into array
//  v 0.3.2 - 2007-0725

/*----------------------------------------------------------------------
 *
 * EDIT THESE SETTINGS to match your install
 *
 *----------------------------------------------------------------------*/


require_once(DRUPAL_ROOT.'/../../www.reactos.org_config/wiki-drupal-config.php');


/*----------------------------------------------------------------------
 *
 * DO NOT EDIT BELOW HERE
 *
 *----------------------------------------------------------------------*/

require_once('AuthDrupalEncode.php');



function mediawikiauth_StaticUserLogout() {

	 // this lifted from wiki/include/DefaultSettings.php
	 $proto = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 'https' : 'http';
	 $cookie_secure = ($proto == 'https');

	foreach( $GLOBALS['wgAuthDrupal_wiki_settings'] as $vals)
	{
		// delete the user's identifying cookies
		authdrupal_StaticUserLogout($vals['wgDBname'], $vals['wgDBprefix'], $vals['wgCookiePath'], $vals['wgCookieDomain'], $cookie_secure );
	}
}



function mediawikiauth_user($op, &$edit, &$user, $category = NULL) {
	 
  switch ($op) {
    case 'login':
		// create seperate session id so mediawiki can see the user!
		$exp = time() + 2592000; // one month in seconds
		$encoded_name = authdrupal_encode($user->name); 
		foreach( $GLOBALS['wgAuthDrupal_wiki_settings'] as $vals) {
			// set the cookie that communicates the username
			setcookie('DRXtrArgs', $user->name, $exp,  $vals['wgCookiePath'], $vals['wgCookieDomain'] );
			setcookie('DRXtrArgs2', $encoded_name, $exp,  $vals['wgCookiePath'], $vals['wgCookieDomain'] );
			
			// remove the loggedout cookie--not sure this is necessary; MW itself does not
			// seem to do it when a user logs back in thru MW
			setcookie( $vals['wgCookiePrefix'].'LoggedOut', '', time() - 3600,  $vals['wgCookiePath'], $vals['wgCookieDomain'], $GLOBALS['wgCookieSecure'] );
		}
      break;

    case 'logout':
		foreach( $GLOBALS['wgAuthDrupal_wiki_settings'] as $vals) {
			// delete the cookie that communicates the username
			setcookie("DRXtrArgs", "", time() - 3600, $vals['wgCookiePath'], $vals['wgCookieDomain']);
			setcookie("DRXtrArgs2", "", time() - 3600, $vals['wgCookiePath'], $vals['wgCookieDomain']);
		}
		mediawikiauth_StaticUserLogout();
      break;

  }
}
function mediawikiauth_user_login(&$edit, $user) {

		// create seperate session id so mediawiki can see the user!
		$exp = time() + 2592000; // one month in seconds
		$encoded_name = authdrupal_encode($user->name); 
		foreach( $GLOBALS['wgAuthDrupal_wiki_settings'] as $vals) {
			// set the cookie that communicates the username
			setcookie('DRXtrArgs', $user->name, $exp,  $vals['wgCookiePath'], $vals['wgCookieDomain'] );
			setcookie('DRXtrArgs2', $encoded_name, $exp,  $vals['wgCookiePath'], $vals['wgCookieDomain'] );
			
			// remove the loggedout cookie--not sure this is necessary; MW itself does not
			// seem to do it when a user logs back in thru MW
			setcookie( $vals['wgCookiePrefix'].'LoggedOut', '', time() - 3600,  $vals['wgCookiePath'], $vals['wgCookieDomain'], $GLOBALS['wgCookieSecure'] );
		}
   
}
function mediawikiauth_user_logout() {
		foreach( $GLOBALS['wgAuthDrupal_wiki_settings'] as $vals) {
			// delete the cookie that communicates the username
			setcookie("DRXtrArgs", "", time() - 3600, $vals['wgCookiePath'], $vals['wgCookieDomain']);
			setcookie("DRXtrArgs2", "", time() - 3600, $vals['wgCookiePath'], $vals['wgCookieDomain']);
		}
		mediawikiauth_StaticUserLogout();  
}