<?php

/**
 * Return an array containing the available hashes
 * @return array
 */
function _htpasswdsync_hashes() {
    return array ('crypt' => 'crypt', 'SHA-1' => 'SHA-1', 'MD5' => 'MD5');
}


/**
 * Returns the selected hash algorithm specified by _htpasswdsync_hashes().
 * @return string
 */
function _htpasswdsync_hash() {
    return variable_get('ldappwd_hash', 'SHA-1');
}

/**
 * Returns if spaces in group and user names shall be removed
 * @return bool
 */
function _htpasswdsync_names_without_whitespace() {
    return variable_get('ldappwd_names_without_whitespace', true);
}


/**
 * Returns if groups and user names shall be exported lowercase
 * @return bool
 */
function _htpasswdsync_names_lowercase() {
    return variable_get('ldappwd_names_lowercase', true);
}


/**
 * Sanatizes the user name to be htpasswd conform. Removes ":" character as it
 * may cause trouble in the files. All non-word characters are removed to
 * be htpasswd/htgroup compliant.
 * @param string $name
 * @return string
 */
function _htpasswdsync_sanatize_name($name) {
    $name = trim(preg_replace('/[^\w\s]/i', '', $name), " \t\n\r");
    if(_htpasswdsync_names_without_whitespace()) $name = str_replace(' ','', $name);
    if(_htpasswdsync_names_lowercase()) $name = strtolower($name);
    return $name;
}


/**
 * Returns the password hashed according to users preferences
 * @param string $password
 * @return string
 */
function _htpasswdsync_crypt($password) {
    $hashes = _htpasswdsync_hashes();
    switch ($hashes[_htpasswdsync_hash()]) {
        case 'crypt':
            return crypt($password, chr(rand(65, 122)) . chr(rand(65, 122)));
            break;
        case 'SHA-1':
            return '{SHA}' . base64_encode(sha1($password, TRUE));
            break;
        case 'MD5':
            return '{MD5}' . base64_encode(MD5($password, TRUE));
        default:
            return _htpasswdsync_hash();
    }
}

/**
 * Update htpassword table with the new password of the user
 * @param object $edit
 * @return void
 */
function _htpasswdsync_update($edit) {
    if(isset($edit->pass) && $edit->pass != '' && isset($edit->name) && strlen(trim($edit->name)) > 0) {
        $user = $edit->name;
        $pass = _htpasswdsync_crypt($edit->pass);
        $passwds[$user] = $pass;
        if(isset($edit->uid) && $edit->uid > 0) {
            $ref_user = user_load($edit->uid);
            if($ref_user->name != $user) {
                db_query("DELETE FROM {ldap_users} WHERE username = :username", array(':username' => $ref_user->name));
            }
        }
        db_query("DELETE FROM {ldap_users} WHERE username = :user", array(':user' => $user));
        db_query("INSERT INTO {ldap_users} (username, passwd) VALUES(:user, :pass)", array(':user' => $user, ':pass' => $pass));
    }
}

/**
 * Remove the one user for the htpassword file
 * @param string $username
 * @return void
 */
function _htpasswdsync_delete_user($username) {
    db_query("DELETE FROM {ldap_users} WHERE username = :username", array(':username' => $username));
    db_query("INSERT INTO {ldap_users} (username, passwd) VALUES(:username, :passwd)", array(':username' => $username, ':passwd' => "****DELETED") );
}


/**
 * Remove the user for the htpassword file
 * @param object $account
 * @return void
 */
function _htpasswdsync_delete($account) {
    _htpasswdsync_delete_user($account->name);
}


/**
 * User cancel hook
 * @param array $edit
 * @param object $account
 * @param string $method
 * @return void
 */
function htpasswdsync_user_cancel($edit, $account, $method) {
    _htpasswdsync_delete($account);
}


/**
 * User delete hook
 * @param object $account
 * @return void
 */
function htpasswdsync_user_delete($account) {
    _htpasswdsync_delete($account);
}


/**
 * User insert/edit hook. Used instead of htpasswdsync_user_insert() and
 * htpasswdsync_user_update() because at these states the password is already
 * hashed.
 * @param string $entity_type
 * @param object $entity
 * @param array $form
 * @param array $form_state
 * @return void
 */
function htpasswdsync_field_attach_submit($entity_type, $entity, $form, &$form_state) {
    if($entity_type != 'user') return;
    if(!empty($entity->name) && !empty($entity->pass)) {
        $r = reset(db_query('SELECT pass FROM {users} WHERE uid=:uid', array(':uid' => $entity->uid))->fetchCol());
        if($r != $entity->pass) {
            _htpasswdsync_update($entity);
        }
    }
}


/**
 * Role delete hook
 * @param object $role
 * @return void
 */
function htpasswdsync_user_role_update($role) {
    //_htpasswdsync_updategroup();
}


/**
 * Role delete hook
 * @param object $role
 * @return void
 */
function htpasswdsync_user_role_delete($role) {
    //_htpasswdsync_updategroup();
}


/**
 * Returns help and module information
 * @param string $path which path of the site we're displaying help
 * @param array $arg Holds the current path as would be returned from arg() function
 * @return string
 */
function htpasswdsync_help($path, $arg) {
    if($path != 'admin/help#htpasswdsync') return '';
    return '<pre>' . htmlspecialchars(@file_get_contents(dirname(__FILE__) . '/README.txt'), null, 'UTF-8') . '</pre>';
}


/**
* Returns the required permissions for the htpasswdsync module
* @return array
*/
function htpasswdsync_permission() {
    return array(
        'administer htpasswdsync' => array(
            'title' => t('Administer LDAP login details export'),
            'restrict access' => true
        )
    );
}


/**
 * Administration menu entry
 * @return array
 */
function htpasswdsync_menu() {
    $items = array();
    $items['admin/config/people/htpasswdsync'] = array(
        'title' => 'Htpasswd file synchronization',
        'description' => 'Preferences for the LDAP Passwords',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('htpasswdsync_admin_form'),
        'access arguments' => array('administer htpasswdsync'),
    );
    return $items;
}


/**
 * Returns the configuration form structure
 * @return array
 */
function htpasswdsync_admin_form() {
    $form['ldappwd_hash'] = array(
        '#type' => 'radios',
        '#title' => t('password hashing algorythm'),
        '#description' => t("How shall the password be hashed (crypt only available for unix, SHA1 can be used on all platforms)"),
        '#options' => _htpasswdsync_hashes(),
        '#default_value' => _htpasswdsync_hash(),
    );
    $form['ldappwd_names_lowercase'] = array(
        '#type' => 'checkbox',
        '#title' => t('Export user names and group names lowercase'),
        '#description' => t("If yes, htpasswdsync will export the lowercase user names (e.g. 'User' will be exported as 'user'). Groups will always be exported lowercase (as the user does not need to enter a group, so this makes it easier to design the .htaccess files). Caution: this option may increase the file size of the htuser file."),
        '#default_value' => _htpasswdsync_names_lowercase(),
    );
    $form['ldappwd_names_without_whitespace'] = array(
        '#type' => 'checkbox',
        '#title' => t('Remove whitespaces in user names and groups'),
        '#description' => t("If yes, htpasswdsync will remove all whitespaces in user names and groups (e.g. 'User 1' will be exported as 'User1'). Caution: this increases the file size of the htuser file. If you use groups, then you must check this setting because whitespaces are used as separators in the group file. This setting goes along with the checkbox above."),
        '#default_value' => _htpasswdsync_names_without_whitespace(),
    );

    // Small description ...
    $notewhitespaces = _htpasswdsync_names_lowercase() ? " Enter your login name without whitespaces and special characters." : "";

    return system_settings_form($form);
}


/**
 * Form validation callback. Checks if htpasswd/htgroup file are writable
 * @param array $form
 * @param array& $form_state
 * @return void
 */
function htpasswdsync_admin_form_validate($form, &$form_state) {
    $error = false;
}

/**
 * Cron hook
 * @return void
 */
function htpasswdsync_cron() {
    db_query('DELETE FROM {ldap_users} WHERE username NOT IN (SELECT name from {users})');
}
?>
